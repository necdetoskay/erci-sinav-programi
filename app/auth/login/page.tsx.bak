"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { LoadingLink } from "@/components/ui/loading-link";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Icons } from "@/components/ui/icons";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";

const loginSchema = z.object({
  email: z.string()
    .min(1, "E-posta adresi gereklidir")
    .email("Geçerli bir e-posta adresi giriniz"),
  password: z.string()
    .min(1, "Şifre gereklidir")
    .min(6, "Şifre en az 6 karakter olmalıdır"),
  rememberMe: z.boolean(),
});

type LoginFormData = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const callbackUrl = searchParams?.get("callbackUrl") || "/dashboard";
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  // Hata ayıklama için konsol loglarını etkinleştir
  useEffect(() => {
    // Ağ isteklerini izle
    const originalFetch = window.fetch;
    window.fetch = async function(input, init) {
      console.log(`Fetch request to: ${typeof input === 'string' ? input : input.url}`);
      try {
        const response = await originalFetch(input, init);
        console.log(`Fetch response from: ${typeof input === 'string' ? input : input.url}`, {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok
        });
        return response;
      } catch (error) {
        console.error(`Fetch error for: ${typeof input === 'string' ? input : input.url}`, error);
        throw error;
      }
    };

    return () => {
      // Temizleme işlemi
      window.fetch = originalFetch;
    };
  }, []);

  const form = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
      rememberMe: false,
    },
  });

  const onSubmit = async (data: LoginFormData) => {
    console.log("Form submitted:", data); // Debug log
    setIsLoading(true);

    try {
      // JWT tabanlı kimlik doğrulama API'sini kullan
      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: data.email,
          password: data.password,
          rememberMe: data.rememberMe,
        }),
      });

      if (!response.ok) {
        const result = await response.json();
        const errorMessage = result.error || "Giriş yapılamadı";
        toast.error(errorMessage);
        return;
      }

      const result = await response.json();

      // Başarılı giriş
      toast.success("Giriş başarılı! Yönlendiriliyorsunuz...");

      console.log("Login successful, redirect info:", result); // Debug log

      // Doğrudan yönlendirme yap - middleware devre dışı olduğu için
      setTimeout(() => {
        // Kullanıcı rolüne göre yönlendirme
        if (result.user && result.user.role === "PERSONEL") {
          console.log("Redirecting to /exam (PERSONEL role)");
          window.location.href = "/exam";
        } else {
          console.log("Redirecting to /dashboard (non-PERSONEL role)");
          window.location.href = "/dashboard";
        }
      }, 1500); // 1.5 saniye bekle, toast mesajının görünmesi için
    } catch (error) {
      console.error("Login error:", error);
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error("Giriş sırasında bir hata oluştu. Lütfen tekrar deneyin.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="container flex h-screen w-screen flex-col items-center justify-center">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl text-center">Giriş Yap</CardTitle>
          <CardDescription className="text-center">
            E-posta ve şifrenizle giriş yapın
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form form={form} onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>E-posta</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        type="email"
                        placeholder="ornek@email.com"
                        autoComplete="email"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Şifre</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Input
                          {...field}
                          type={showPassword ? "text" : "password"}
                          placeholder="••••••••"
                          autoComplete="current-password"
                          disabled={isLoading}
                        />
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                          onClick={togglePasswordVisibility}
                          disabled={isLoading}
                        >
                          {showPassword ? (
                            <Icons.eyeOff className="h-4 w-4" />
                          ) : (
                            <Icons.eye className="h-4 w-4" />
                          )}
                        </Button>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex items-center space-x-2 mb-4">
                <FormField
                  control={form.control}
                  name="rememberMe"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                          disabled={isLoading}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel className="cursor-pointer">
                          Beni hatırla
                        </FormLabel>
                      </div>
                    </FormItem>
                  )}
                />
              </div>

              <Button
                type="submit"
                className="w-full"
                disabled={isLoading}
              >
                {isLoading && (
                  <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                )}
                {isLoading ? "Giriş yapılıyor..." : "Giriş Yap"}
              </Button>
          </Form>

          <div className="mt-4">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">
                  Veya
                </span>
              </div>
            </div>

            <div className="mt-4 text-center text-sm">
              Hesabınız yok mu?{" "}
              <LoadingLink
                href="/auth/register"
                className="font-medium text-primary hover:underline"
              >
                Kayıt olun
              </LoadingLink>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
