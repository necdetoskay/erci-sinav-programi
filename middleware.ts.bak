import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getUserFromToken } from '@/lib/jwt-auth';

// CORS yapılandırması için izin verilen originler
const allowedOrigins = process.env.NODE_ENV === 'production'
  ? [process.env.NEXT_PUBLIC_APP_URL || 'https://your-production-domain.com'] // Production'da sadece kendi domain'iniz
  : [
      'http://localhost:3000',
      'http://localhost',
      'http://127.0.0.1:3000',
      'http://127.0.0.1',
      'null', // Bazı tarayıcılar file:// protokolü için origin olarak 'null' gönderir
    ]; // Development'da localhost ve 127.0.0.1

// Rate limiting için basit bir implementasyon
const rateLimit = {
  windowMs: 60 * 1000, // 1 dakika
  max: 100, // Her IP için dakikada maksimum 100 istek
  message: 'Too many requests, please try again later.',
  ipCache: new Map<string, { count: number, resetTime: number }>(),
};

// Ana middleware fonksiyonu
export function middleware(req: NextRequest) {
  // Önce JWT token kontrolü ve yönlendirme
  const authRedirect = checkAuthAndRedirect(req);
  if (authRedirect) {
    return authRedirect;
  }

  // Eğer yönlendirme yoksa, CORS ve güvenlik kontrollerine devam et
  const res = NextResponse.next();
  const origin = req.headers.get('origin');

  // CORS kontrolleri - 403 hatalarını önlemek için devre dışı bırakıldı
  if (origin) {
    // Tüm originlere izin ver
    res.headers.set('Access-Control-Allow-Origin', origin);

    // CORS headers
    res.headers.set('Access-Control-Allow-Credentials', 'true');
    res.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    console.log(`CORS headers set for origin: ${origin}, path: ${req.nextUrl.pathname}`);
  }

  // Rate limiting
  const ip = req.ip || 'unknown';
  const now = Date.now();

  if (!rateLimit.ipCache.has(ip)) {
    rateLimit.ipCache.set(ip, { count: 1, resetTime: now + rateLimit.windowMs });
  } else {
    const data = rateLimit.ipCache.get(ip)!;

    // Süre dolmuşsa sayacı sıfırla
    if (now > data.resetTime) {
      data.count = 1;
      data.resetTime = now + rateLimit.windowMs;
    } else {
      // Limit aşıldıysa isteği reddet
      if (data.count >= rateLimit.max) {
        return new NextResponse(JSON.stringify({ error: rateLimit.message }), {
          status: 429,
          headers: {
            'Content-Type': 'application/json',
            'Retry-After': '60',
          },
        });
      }
      data.count++;
    }
    rateLimit.ipCache.set(ip, data);
  }

  // Güvenlik başlıkları
  res.headers.set('X-Content-Type-Options', 'nosniff');
  res.headers.set('X-Frame-Options', 'DENY');
  res.headers.set('X-XSS-Protection', '1; mode=block');

  // OPTIONS isteklerini hemen yanıtla
  if (req.method === 'OPTIONS') {
    return new NextResponse(null, { status: 200, headers: res.headers });
  }

  return res;
}

// JWT token kontrolü ve yönlendirme
function checkAuthAndRedirect(req: NextRequest) {
  const path = req.nextUrl.pathname;

  // Korumalı rotalar
  const protectedRoutes = [
    "/dashboard",
    "/exam",
    "/admin",
    "/profile",
    "/settings",
  ];

  // Auth token'ı al
  const authToken = req.cookies.get("auth-token")?.value;

  // Login sayfası için token kontrolü
  // API isteklerini etkilememesi için sadece HTML sayfası isteklerini kontrol et
  if (authToken &&
      path === '/auth/login' &&
      !req.headers.get('content-type')?.includes('application/json')) {

    // Token'dan kullanıcı bilgilerini al
    const user = getUserFromToken(authToken);

    if (user) {
      // Kullanıcı rolüne göre yönlendirme
      const targetUrl = user.role === "PERSONEL"
        ? new URL('/exam', req.url)
        : new URL('/dashboard', req.url);

      console.log(`Middleware: Redirecting authenticated user from login page to ${targetUrl.pathname}`);

      // 307 Temporary Redirect kullan - bu, tarayıcının yönlendirmeyi takip etmesini sağlar
      return NextResponse.redirect(targetUrl, 307);
    }
  }

  // Ana sayfa için yönlendirme
  if (authToken && path === '/') {
    // Token'dan kullanıcı bilgilerini al
    const user = getUserFromToken(authToken);

    if (user) {
      // Kullanıcı rolüne göre yönlendirme
      if (user.role === "PERSONEL") {
        return NextResponse.redirect(new URL('/exam', req.url));
      } else {
        return NextResponse.redirect(new URL('/dashboard', req.url));
      }
    }
  }

  // Korumalı rotalar için token kontrolü
  const isProtectedRoute = protectedRoutes.some(route => path.startsWith(route));

  if (isProtectedRoute) {
    // Token yoksa, login sayfasına yönlendir
    if (!authToken) {
      console.log(`Middleware: No auth token found for protected route: ${path}`);
      const url = new URL('/auth/login', req.url);
      url.searchParams.set('callbackUrl', path);
      return NextResponse.redirect(url, 307); // 307 Temporary Redirect
    }

    // Token'dan kullanıcı bilgilerini al
    const user = getUserFromToken(authToken);

    if (!user) {
      console.log(`Middleware: Invalid token for protected route: ${path}`);
      // Token geçersizse, login sayfasına yönlendir
      const url = new URL('/auth/login', req.url);
      url.searchParams.set('callbackUrl', path);
      return NextResponse.redirect(url, 307); // 307 Temporary Redirect
    }

    console.log(`Middleware: User ${user.id} (${user.role}) accessing protected route: ${path}`);

    // PERSONEL rolüne sahip kullanıcılar sadece /exam sayfasına erişebilir
    if (user.role === "PERSONEL" && path.startsWith('/dashboard')) {
      console.log(`Middleware: Redirecting PERSONEL user from /dashboard to /exam`);
      return NextResponse.redirect(new URL('/exam', req.url), 307); // 307 Temporary Redirect
    }

    // ADMIN rolü kontrolü
    if (path.startsWith('/admin') && user.role !== "ADMIN") {
      console.log(`Middleware: Redirecting non-ADMIN user from /admin to /dashboard`);
      return NextResponse.redirect(new URL('/dashboard', req.url), 307); // 307 Temporary Redirect
    }
  }

  return null;
}

export const config = {
  // Middleware'in uygulanacağı path'ler
  matcher: [
    // JWT auth kontrolü için
    '/',
    '/dashboard/:path*',
    '/exam/:path*',
    '/admin/:path*',
    '/profile/:path*',
    '/settings/:path*',
    '/auth/login',
    '/auth/register',

    // CORS ve güvenlik middleware'i için tüm API rotaları
    '/api/:path*',
  ],
};
