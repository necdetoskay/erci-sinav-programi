generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role           @default(USER)
  roleId        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  exams         Exam[]
  models        Model[]
  providers     Provider[]
  questionPools QuestionPool[]
  refreshTokens RefreshToken[]
  customRole    CustomRole?    @relation(fields: [roleId], references: [id])
  settings      UserSetting[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Exam {
  id               Int           @id @default(autoincrement())
  title            String
  description      String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now()) @updatedAt
  status           String        @default("draft")
  duration_minutes Int           @default(60)
  access_code      String?
  createdById      String
  createdBy        User          @relation(fields: [createdById], references: [id])
  attempts         ExamAttempt[]
  exam_results     ExamResult[]
  questions        Question[]

  @@index([createdById])
}

model Question {
  id             Int                 @id @default(autoincrement())
  exam_id        Int
  question_text  String
  options        Json
  correct_answer String
  explanation    String?
  difficulty     String              @default("medium")
  position       Int?
  created_at     DateTime            @default(now())
  attemptAnswers ExamAttemptAnswer[]
  exam           Exam                @relation(fields: [exam_id], references: [id], onDelete: Cascade)
}

model ExamResult {
  id                Int       @id @default(autoincrement())
  exam_id           Int
  participant_name  String
  participant_email String?
  score             Int?
  total_questions   Int?
  start_time        DateTime?
  end_time          DateTime?
  answers           Json?
  created_at        DateTime  @default(now())
  exam              Exam      @relation(fields: [exam_id], references: [id], onDelete: Cascade)
}

model ExamAttempt {
  id                   String              @id @default(cuid())
  examId               Int
  participantName      String
  participantEmail     String?
  status               ExamAttemptStatus   @default(STARTED)
  currentQuestionIndex Int                 @default(0)
  answers              Json?
  startTime            DateTime            @default(now())
  lastActivityAt       DateTime            @updatedAt
  endTime              DateTime?
  score                Float?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  exam                 Exam                @relation(fields: [examId], references: [id], onDelete: Cascade)
  attemptAnswers       ExamAttemptAnswer[]

  @@index([examId, participantEmail])
}

model ExamAttemptAnswer {
  id               String      @id @default(cuid())
  examAttemptId    String
  questionId       Int
  selectedAnswer   String
  isCorrect        Boolean
  timeSpentSeconds Int
  answeredAt       DateTime    @default(now())
  examAttempt      ExamAttempt @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)
  question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([examAttemptId, questionId])
  @@index([examAttemptId])
  @@index([questionId])
}

model QuestionPool {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  subject     String
  difficulty  String         @default("medium")
  status      Status         @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  questions   PoolQuestion[]
  createdBy   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PoolQuestion {
  id            Int          @id @default(autoincrement())
  questionText  String
  options       Json
  correctAnswer String
  explanation   String?
  tags          String[]
  difficulty    String       @default("medium")
  position      Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  poolId        Int
  pool          QuestionPool @relation(fields: [poolId], references: [id], onDelete: Cascade)

  @@index([poolId])
}

model ExamEntryAttempt {
  id               String   @id @default(cuid())
  examAccessCode   String
  email            String
  verificationCode String
  expiresAt        DateTime
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([examAccessCode, email])
  @@index([verificationCode])
}

model Setting {
  key       String   @id
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GlobalSetting {
  key       String   @id
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSetting {
  id        String   @id @default(cuid())
  userId    String
  key       String
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId])
}

model Provider {
  id          String   @id @default(cuid())
  name        String
  description String?
  apiKey      String   @db.VarChar(255)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  models      Model[]
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Model {
  id         String   @id @default(cuid())
  name       String
  details    String?
  codeName   String
  apiCode    String?
  orderIndex Int      @default(0)
  isEnabled  Boolean  @default(true)
  providerId String
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([providerId])
  @@index([userId])
  @@index([orderIndex])
}

model CustomRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

enum ExamAttemptStatus {
  STARTED
  IN_PROGRESS
  PAUSED
  SUBMITTED
  TIMED_OUT
  GRADED
}

enum Role {
  USER
  PERSONEL
  ADMIN
  SUPERADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
