// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  questionPools QuestionPool[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

// Sınav sistemi modelleri

model Exam {
  id               Int          @id @default(autoincrement())
  title            String
  description      String?      @db.Text
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now()) @updatedAt
  status           String       @default("draft") // 'draft' veya 'published'
  duration_minutes Int          @default(60)
  access_code      String?
  questions        Question[]
  exam_results     ExamResult[]
}

model Question {
  id             Int      @id @default(autoincrement())
  exam_id        Int
  question_text  String   @db.Text
  options        Json     // Seçenekler JSON dizisi olarak
  correct_answer String   // 'A', 'B', 'C', 'D' gibi
  explanation    String?  @db.Text
  difficulty     String   @default("medium") // 'easy', 'medium', 'hard'
  position       Int?
  created_at     DateTime @default(now())
  exam           Exam     @relation(fields: [exam_id], references: [id], onDelete: Cascade)
}

model ExamResult {
  id                Int      @id @default(autoincrement())
  exam_id           Int
  participant_name  String
  participant_email String?
  score             Int?
  total_questions   Int?
  start_time        DateTime?
  end_time          DateTime?
  answers           Json?    // Verilen cevaplar JSON olarak
  created_at        DateTime @default(now())
  exam              Exam     @relation(fields: [exam_id], references: [id], onDelete: Cascade)
}

// Soru Havuzu modelleri
model QuestionPool {
  id          Int       @id @default(autoincrement())
  title       String
  description String?   @db.Text
  subject     String    // Ders/Konu
  grade       String    // Sınıf seviyesi
  difficulty  String    @default("medium") // 'easy', 'medium', 'hard'
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  questions   PoolQuestion[]
  createdBy   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model PoolQuestion {
  id             Int          @id @default(autoincrement())
  questionText   String       @db.Text
  options        Json         // Seçenekler JSON dizisi olarak
  correctAnswer  String       // 'A', 'B', 'C', 'D' gibi
  explanation    String?      @db.Text
  tags          String[]     // Soru etiketleri
  difficulty     String       @default("medium")
  position       Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  pool          QuestionPool @relation(fields: [poolId], references: [id], onDelete: Cascade)
  poolId        Int

  @@index([poolId])
}

// Sınav Giriş Doğrulama Modeli
model ExamEntryAttempt {
  id               String    @id @default(cuid())
  examAccessCode   String    // Kullanıcının girdiği ilk kod (toplu maildeki)
  email            String
  verificationCode String    // E-postaya gönderilen kod
  expiresAt        DateTime  // Doğrulama kodunun son kullanma tarihi
  verified         Boolean   @default(false) // Kod doğrulandı mı?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([examAccessCode, email])
  @@index([verificationCode])
}

// Uygulama Ayarları Modeli
model Setting {
  key       String  @id // Ayar anahtarı (örn: "SMTP_HOST", "SMTP_PORT")
  value     String? @db.Text // Ayar değeri
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
