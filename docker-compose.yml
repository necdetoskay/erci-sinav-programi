version: '3.8'

# Portainer için etiketler
x-portainer:
  project-name: "erci-sinav-programi"
  description: "Erci Sınav Programı - Next.js Uygulaması"

services:
  app:
    container_name: erci-sinav-programi
    # Using locally built image
    image: necdetoskay/erci-sinav-programi:latest
    labels:
      - "com.docker.compose.project=erci-sinav-programi"
      - "com.docker.compose.service=app"
    restart: always
    ports:
      - "3000:3000" # Host port 3000 mapped to container port 3000
    environment:
      - NODE_ENV=development # Geliştirme moduna ayarlandı
      - DATABASE_URL=postgresql://postgres:P@ssw0rd@db:5432/postgres?schema=public
      - JWT_SECRET=cpFZHH5zLazWQ0n5+iq+Fmk0AVS1j6fd/tRbai7suMQ= # JWT için güvenli anahtar
      - REFRESH_TOKEN_SECRET=cpFZHH5zLazWQ0n5+iq+Fmk0AVS1j6fd/tRbai7suMQ= # Refresh token için güvenli anahtar
      - ACCESS_TOKEN_EXPIRES_IN=15m # Access token süresi
      - REFRESH_TOKEN_EXPIRES_IN=7d # Refresh token süresi
      - NEXT_PUBLIC_APP_URL=http://localhost:3000 # Dış erişim URL'i
      - ADMIN_PASSWORD=Bi41*42* # Admin şifresi
      - DEBUG=true # Hata ayıklama için
    depends_on:
      - db
    networks:
      - app-network
    volumes:
      # Bind mount kullanarak yerel dizinleri belirtiyoruz
      - ./persistent-data-dev/uploads:/app/uploads
      - ./logs:/app/logs
    # Entrypoint olarak init-admin.sh kullanılıyor
    # Bu script veritabanı migrasyonlarını çalıştırır ve admin kullanıcısını oluşturur
    entrypoint: ["/bin/sh", "-c", "echo 'Waiting for database to be ready...' && sleep 10 && /app/db/init-scripts/init-admin.sh && node server.js"]

  db:
    container_name: erci-sinav-db
    image: postgres:15-alpine
    labels:
      - "com.docker.compose.project=erci-sinav-programi"
      - "com.docker.compose.service=db"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=P@ssw0rd
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./persistent-data-dev/postgres:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all", "-c", "log_connections=on"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  pgadmin:
    container_name: erci-sinav-pgadmin
    image: dpage/pgadmin4
    labels:
      - "com.docker.compose.project=erci-sinav-programi"
      - "com.docker.compose.service=pgadmin"
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=80
    ports:
      - "8080:80"
    volumes:
      - ./persistent-data-dev/pgadmin:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - app-network

# Bind mount kullanıldığı için volume tanımlamalarına gerek yok

networks:
  app-network:
    driver: bridge
